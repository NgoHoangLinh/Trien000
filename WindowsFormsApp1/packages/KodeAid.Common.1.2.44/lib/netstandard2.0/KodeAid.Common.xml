<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KodeAid.Common</name>
    </assembly>
    <members>
        <member name="M:KodeAid.Base36Encoder.NewGuid">
            <summary>
            Creates a new <see cref="T:System.Guid"/> encoded as a base 36 string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:KodeAid.ComponentModel.ChangeNotificationObject.ChangeProperty``1(``0@,``0,System.String)">
            <summary>
            Changes the specified property's backing field if they are considered unequal and raises any notifications as required.
            If both values are considered to be equal, then no assignement or notifications occurs.
            This is an overload to accomodate the most common use-case utilizing the <seealso cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/> for <paramref name="propertyName"/>.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyField">The backing field of the property passed in by reference and currently assigned the old value.</param>
            <param name="value">The new value for the property to be assigned to the backing field <paramref name="propertyField"/> if they are considered to be unequal.</param>
            <param name="propertyName">The name of the property, defaults to null which will be populated by the calling member's name.</param>
            <returns>True if the property was changed; otherwise, false.</returns>
        </member>
        <member name="M:KodeAid.ComponentModel.ChangeNotificationObject.ChangeProperty``1(System.String,``0@,``0)">
            <summary>
            Changes the specified property's backing field if they are considered unequal and raises any notifications as required.
            If both values are considered to be equal, then no assignement or notifications occurs.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyField">The backing field of the property passed in by reference and currently assigned the old value.</param>
            <param name="value">The new value for the property to be assigned to the backing field <paramref name="propertyField"/> if they are considered to be unequal.</param>
            <returns>True if the property was changed; otherwise, false.</returns>
        </member>
        <member name="M:KodeAid.ComponentModel.ChangeNotificationObject.ChangeProperty``1(System.String,``0@,``0,System.String[])">
            <summary>
            Changes the specified property's backing field if they are considered unequal and raises any notifications as required.
            If both values are considered to be equal, then no assignement or notifications occurs.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyField">The backing field of the property passed in by reference and currently assigned the old value.</param>
            <param name="value">The new value for the property to be assigned to the backing field <paramref name="propertyField"/> if they are considered to be unequal.</param>
            <param name="affectedProperties">Any additional properties which should be considered affected by this change.</param>
            <returns>True if the property was changed; otherwise, false.</returns>
        </member>
        <member name="M:KodeAid.ComponentModel.ChangeNotificationObject.ChangeProperty``1(System.String,``0@,``0,System.Boolean)">
            <summary>
            Changes the specified property's backing field if they are considered unequal and raises any notifications as required.
            If both values are considered to be equal, then no assignement or notifications occurs.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyField">The backing field of the property passed in by reference and currently assigned the old value.</param>
            <param name="value">The new value for the property to be assigned to the backing field <paramref name="propertyField"/> if they are considered to be unequal.</param>
            <param name="allPropertiesAffected">True if all properties should be considered affected by this change; otherwise, false.</param>
            <returns>True if the property was changed; otherwise, false.</returns>
        </member>
        <member name="M:KodeAid.ComponentModel.ChangeNotificationObject.ChangeProperty``1(System.String,``0@,``0,System.Action)">
            <summary>
            Changes the specified property's backing field if they are considered unequal and raises any notifications as required.
            If both values are considered to be equal, then no assignement or notifications occurs.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyField">The backing field of the property passed in by reference and currently assigned the old value.</param>
            <param name="value">The new value for the property to be assigned to the backing field <paramref name="propertyField"/> if they are considered to be unequal.</param>
            <param name="onChange">An optional action to invoke after the change and prior to notifications.</param>
            <returns>True if the property was changed; otherwise, false.</returns>
        </member>
        <member name="M:KodeAid.ComponentModel.ChangeNotificationObject.ChangeProperty``1(System.String,``0@,``0,System.Action,System.String[])">
            <summary>
            Changes the specified property's backing field if they are considered unequal and raises any notifications as required.
            If both values are considered to be equal, then no assignement or notifications occurs.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyField">The backing field of the property passed in by reference and currently assigned the old value.</param>
            <param name="value">The new value for the property to be assigned to the backing field <paramref name="propertyField"/> if they are considered to be unequal.</param>
            <param name="onChange">An optional action to invoke after the change and prior to notifications.</param>
            <param name="affectedProperties">Any additional properties which should be considered affected by this change.</param>
            <returns>True if the property was changed; otherwise, false.</returns>
        </member>
        <member name="M:KodeAid.ComponentModel.ChangeNotificationObject.ChangeProperty``1(System.String,``0@,``0,System.Action,System.Boolean)">
            <summary>
            Changes the specified property's backing field if they are considered unequal and raises any notifications as required.
            If both values are considered to be equal, then no assignement or notifications occurs.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyField">The backing field of the property passed in by reference and currently assigned the old value.</param>
            <param name="value">The new value for the property to be assigned to the backing field <paramref name="propertyField"/> if they are considered to be unequal.</param>
            <param name="onChange">An optional action to invoke after the change and prior to notifications.</param>
            <param name="allPropertiesAffected">True if all properties should be considered affected by this change; otherwise, false.</param>
            <returns>True if the property was changed; otherwise, false.</returns>
        </member>
        <member name="M:KodeAid.ComponentModel.ChangeNotificationObject.ChangeProperty``1(System.String,``0@,``0,System.Action{``0},System.Action{``0})">
            <summary>
            Changes the specified property's backing field if they are considered unequal and raises any notifications as required.
            If both values are considered to be equal, then no assignement or notifications or initialization occurs.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyField">The backing field of the property passed in by reference and currently assigned the old value.</param>
            <param name="value">The new value for the property to be assigned to the backing field <paramref name="propertyField"/> if they are considered to be unequal.</param>
            <param name="initialize">An optional action to invoke on the new value after assignment, invoked only if the new value is not null.</param>
            <param name="uninitialize">An optional action to invoke on the old value prior to assignment, invoked only if the old value is not null.</param>
            <returns>True if the property was changed; otherwise, false.</returns>
        </member>
        <member name="M:KodeAid.ComponentModel.ChangeNotificationObject.ChangeProperty``1(System.String,``0@,``0,System.Action{``0},System.Action{``0},System.String[])">
            <summary>
            Changes the specified property's backing field if they are considered unequal and raises any notifications as required.
            If both values are considered to be equal, then no assignement or notifications or initialization occurs.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyField">The backing field of the property passed in by reference and currently assigned the old value.</param>
            <param name="value">The new value for the property to be assigned to the backing field <paramref name="propertyField"/> if they are considered to be unequal.</param>
            <param name="initialize">An optional action to invoke on the new value after assignment, invoked only if the new value is not null.</param>
            <param name="uninitialize">An optional action to invoke on the old value prior to assignment, invoked only if the old value is not null.</param>
            <param name="affectedProperties">Any additional properties which should be considered affected by this change.</param>
            <returns>True if the property was changed; otherwise, false.</returns>
        </member>
        <member name="M:KodeAid.ComponentModel.ChangeNotificationObject.ChangeProperty``1(System.String,``0@,``0,System.Action{``0},System.Action{``0},System.Boolean)">
            <summary>
            Changes the specified property's backing field if they are considered unequal and raises any notifications as required.
            If both values are considered to be equal, then no assignement or notifications or initialization occurs.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyField">The backing field of the property passed in by reference and currently assigned the old value.</param>
            <param name="value">The new value for the property to be assigned to the backing field <paramref name="propertyField"/> if they are considered to be unequal.</param>
            <param name="initialize">An optional action to invoke on the new value after assignment, invoked only if the new value is not null.</param>
            <param name="uninitialize">An optional action to invoke on the old value prior to assignment, invoked only if the old value is not null.</param>
            <param name="allPropertiesAffected">True if all properties should be considered affected by this change; otherwise, false.</param>
            <returns>True if the property was changed; otherwise, false.</returns>
        </member>
        <member name="M:KodeAid.ComponentModel.ChangeNotificationObject.ChangeProperty``1(System.String,``0@,``0,System.Action{``0},System.Action{``0},System.Action)">
            <summary>
            Changes the specified property's backing field if they are considered unequal and raises any notifications as required.
            If both values are considered to be equal, then no assignement or notifications or initialization occurs.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyField">The backing field of the property passed in by reference and currently assigned the old value.</param>
            <param name="value">The new value for the property to be assigned to the backing field <paramref name="propertyField"/> if they are considered to be unequal.</param>
            <param name="initialize">An optional action to invoke on the new value after assignment, invoked only if the new value is not null.</param>
            <param name="uninitialize">An optional action to invoke on the old value prior to assignment, invoked only if the old value is not null.</param>
            <param name="onChange">An optional action to invoke after the change and prior to notifications.</param>
            <returns>True if the property was changed; otherwise, false.</returns>
        </member>
        <member name="M:KodeAid.ComponentModel.ChangeNotificationObject.ChangeProperty``1(System.String,``0@,``0,System.Action{``0},System.Action{``0},System.Action,System.String[])">
            <summary>
            Changes the specified property's backing field if they are considered unequal and raises any notifications as required.
            If both values are considered to be equal, then no assignement or notifications or initialization occurs.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyField">The backing field of the property passed in by reference and currently assigned the old value.</param>
            <param name="value">The new value for the property to be assigned to the backing field <paramref name="propertyField"/> if they are considered to be unequal.</param>
            <param name="initialize">An optional action to invoke on the new value after assignment, invoked only if the new value is not null.</param>
            <param name="uninitialize">An optional action to invoke on the old value prior to assignment, invoked only if the old value is not null.</param>
            <param name="onChange">An optional action to invoke after the change and prior to notifications.</param>
            <param name="affectedProperties">Any additional properties which should be considered affected by this change.</param>
            <returns>True if the property was changed; otherwise, false.</returns>
        </member>
        <member name="M:KodeAid.ComponentModel.ChangeNotificationObject.ChangeProperty``1(System.String,``0@,``0,System.Action{``0},System.Action{``0},System.Action,System.Boolean)">
            <summary>
            Changes the specified property's backing field if they are considered unequal and raises any notifications as required.
            If both values are considered to be equal, then no assignement or notifications or initialization occurs.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyField">The backing field of the property passed in by reference and currently assigned the old value.</param>
            <param name="value">The new value for the property to be assigned to the backing field <paramref name="propertyField"/> if they are considered to be unequal.</param>
            <param name="initialize">An optional action to invoke on the new value after assignment, invoked only if the new value is not null.</param>
            <param name="uninitialize">An optional action to invoke on the old value prior to assignment, invoked only if the old value is not null.</param>
            <param name="onChange">An optional action to invoke after the change and prior to notifications.</param>
            <param name="allPropertiesAffected">True if all properties should be considered affected by this change; otherwise, false.</param>
            <returns>True if the property was changed; otherwise, false.</returns>
        </member>
        <member name="M:KodeAid.ComponentModel.ChangeNotificationObject.ChangeProperty``1(System.String,``0@,``0,System.Action{``0},System.Action{``0},System.Action,System.Boolean,System.String[])">
            <summary>
            Changes the specified property's backing field if they are considered unequal and raises any notifications as required.
            If both values are considered to be equal, then no assignement or notifications or initialization occurs.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="propertyField">The backing field of the property passed in by reference and currently assigned the old value.</param>
            <param name="value">The new value for the property to be assigned to the backing field <paramref name="propertyField"/> if they are considered to be unequal.</param>
            <param name="initialize">An optional action to invoke on the new value after assignment, invoked only if the new value is not null.</param>
            <param name="uninitialize">An optional action to invoke on the old value prior to assignment, invoked only if the old value is not null.</param>
            <param name="onChange">An optional action to invoke after the change and prior to notifications.</param>
            <param name="allPropertiesAffected">True if all properties should be considered affected by this change; otherwise, false.</param>
            <param name="affectedProperties">Any additional properties which should be considered affected by this change.</param>
            <returns>True if the property was changed; otherwise, false.</returns>
        </member>
        <member name="P:KodeAid.ComponentModel.EditableObjectBase.PendingEditCount">
            <summary>
            The number of edit transaction scopes pending.
            </summary>
        </member>
        <member name="P:KodeAid.ComponentModel.EditableObjectBase.HasChangesInPendingEdit">
            <summary>
            True if there are any changes pending in the current or ancestral (parent) edit transaction scopes.
            </summary>
        </member>
        <member name="P:KodeAid.ComponentModel.EditableObjectBase.HasChangesInCurrentEdit">
            <summary>
            True if there are any changes pending in the current edit transaction scope only.
            </summary>
        </member>
        <member name="M:KodeAid.EnumHelper.NormalizeName``1(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Normalizes an string representation of an enumeration by replacing any occurences of <see cref="T:System.Runtime.Serialization.EnumMemberAttribute"/> with their corresponding constant name.
            </summary>
        </member>
        <member name="M:KodeAid.EnumHelper.NormalizeName(System.Type,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Normalizes an string representation of an enumeration by replacing any occurences of <see cref="T:System.Runtime.Serialization.EnumMemberAttribute"/> with their corresponding constant name.
            </summary>
        </member>
        <member name="M:KodeAid.EnumHelper.GetSerializedName``1(``0)">
            <summary>
            Get a string name of the enum, this will be the serialized name 
            if one was explicitly set via an <see cref="T:System.Runtime.Serialization.EnumMemberAttribute"/> attribute,
            otherwise it will be the normal enum field name.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <param name="value">The enumeration constant value.</param>
            <returns>The value's serialized name if it has one, otherwise the normal enum field name.</returns>
        </member>
        <member name="M:KodeAid.EnumHelper.Parse``1(System.String,System.Boolean)">
            <summary>
            Converts the string representation of the name, serialized name, or numeric value 
            of one or more enumerated constants to an equivalent enumerated object. 
            A parameter specifies whether the operation is case-insensitive.
            </summary>
            <typeparam name="TEnum">The enumeration type to which to convert value.</typeparam>
            <param name="value">The string representation of the enumeration name, serialized name, or underlying value to convert.</param>
            <param name="ignoreCase">true to ignore case; false to consider case.</param>
            <returns>An object of type enumType whose value is represented by value.</returns>
        </member>
        <member name="M:KodeAid.EnumHelper.TryParse``1(System.String,``0@,System.Boolean)">
            <summary>
            Converts the string representation of the name, serialized name, or numeric value 
            of one or more enumerated constants to an equivalent enumerated object. 
            A parameter specifies whether the operation is case-insensitive.
            </summary>
            <typeparam name="TEnum">The enumeration type to which to convert value.</typeparam>
            <param name="value">The string representation of the enumeration name, serialized name, or underlying value to convert.</param>
            <param name="ignoreCase">true to ignore case; false to consider case.</param>
            <param name="result">When this method returns, result contains an object of type TEnum whose value
            is represented by value if the parse operation succeeds. If the parse operation
            fails, result contains the default value of the underlying type of TEnum. Note
            that this value need not be a member of the TEnum enumeration. This parameter
            is passed uninitialized.</param>
            <returns>true if the value parameter was converted successfully; otherwise, false.</returns>
        </member>
        <member name="P:KodeAid.FaultTolerance.ExponentialRetry.MaxRetryCount">
            <summary>
            Maximum number of retries, default is three retries.
            </summary>
        </member>
        <member name="P:KodeAid.FaultTolerance.ExponentialRetry.MaxRetryDelay">
            <summary>
            Maximum delay period per retry, default is infinite.
            </summary>
        </member>
        <member name="P:KodeAid.FaultTolerance.ExponentialRetry.BaseDelay">
            <summary>
            Delay period base time, default is one second.
            </summary>
        </member>
        <member name="P:KodeAid.FaultTolerance.ExponentialRetry.ExponentialPower">
            <summary>
            delay = BaseDelay * Math.Pow(context.RetryCount, ExponentialPower);
            </summary>
        </member>
        <member name="M:KodeAid.FaultTolerance.OperationManager`1.ExecuteOperationCompleted(KodeAid.FaultTolerance.OperationContext)">
            <summary>
            Called after an operation has completed within ExecuteOperationAsync,
            regardless of success or failure and prior to any exception being thrown.
            </summary>
        </member>
        <member name="T:KodeAid.IAsyncInitializable">
            <summary>
            Provides a mechanism to await an asynchronous initialization task started in the constructor.
            </summary>
        </member>
        <member name="M:KodeAid.Reflection.AssemblyExtensions.GetLoadableTypes(System.Reflection.Assembly)">
            <summary>
            Gets the types defined in this assembly that can be loaded.
            </summary>
            <param name="assembly">The assembly to search.</param>
            <returns>An array that contains all the types that are defined in this assembly that can be loaded.</returns>
        </member>
        <member name="F:KodeAid.Reflection.AssemblySearchOptions.ReferencedAssemblies">
            <summary>
            Include all referenced assemblies.
            </summary>
        </member>
        <member name="F:KodeAid.Reflection.AssemblySearchOptions.StartingDirectory">
            <summary>
            Search the directory of the starting point assembly.
            </summary>
        </member>
        <member name="F:KodeAid.Reflection.AssemblySearchOptions.AssemblyDirectories">
            <summary>
            Search the directories of all the referenced assemblies that matched and were included.
            </summary>
        </member>
        <member name="F:KodeAid.Reflection.AssemblySearchOptions.IncludeSubdirectories">
            <summary>
            Include all subdirectories in any directory searching.
            </summary>
        </member>
        <member name="F:KodeAid.Reflection.AssemblySearchOptions.Default">
            <summary>
            The default options if not specified.
            </summary>
        </member>
        <member name="M:KodeAid.Reflection.ReflectionHelper.FollowPropertyPath(System.Object,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Traverses a path down an object including properties, dictionaries, lists and arrays.
            "Employees[John].Addresses[0].StreetName"
            </summary>
            <param name="obj">The root target object.</param>
            <param name="path">The path to follow, eg: "Employees[John].Addresses[0].StreetName"</param>
            <param name="ignoreCase">True to ignore case on property names, otherwise false.</param>
            <param name="throwOnPathNotFound">True to throw InvalidOperationException when a property or index was not found, otherwise false.</param>
            <param name="throwOnNullReference">True to throw NullReferenceException when path cannot be fully traversed due to a null segment along the way, otherwise false.</param>
            <returns></returns>
        </member>
        <member name="M:KodeAid.Reflection.ReflectionHelper.FindAllTypes``1(System.Reflection.Assembly,System.Predicate{System.Type},System.Boolean,KodeAid.Reflection.AssemblySearchOptions,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Find all defined types across all referenced assemblies including those in the execution paths.
            </summary>
            <typeparam name="T">Type which the results must be assignable to.</typeparam>
            <param name="startingPoint">Assemblies to start the search from, if not provided the entry assembly is used: Assembly.GetEntryAssembly().</param>
            <param name="typeFilter">Predicate to filter out returned types, or null for the default which is to include all public instance non-abstract and non-generic classes or value-types.</param>
            <param name="mustHavePublicDefaultCtor">True to ensure all returned types have a public default constructor defined, otherwise false.</param>
            <param name="assemblySearchOptions">How to search for additional assemblies to include.</param>
            <param name="throwOnError">True to throw on any assembly load errors, otherwise false.</param>
            <param name="assemblyNamePrefixes">Case insensitive prefixes of assembly names and file names (*.dlls) to include in search, null/empty to include all.</param>
            <returns></returns>
        </member>
        <member name="M:KodeAid.Reflection.ReflectionHelper.FindAllTypes``1(System.Reflection.Assembly,System.Predicate{System.Type},System.Boolean,KodeAid.Reflection.AssemblySearchOptions,System.Boolean,System.String[])">
            <summary>
            Find all defined types across all referenced assemblies including those in the execution paths.
            </summary>
            <typeparam name="T">Type which the results must be assignable to.</typeparam>
            <param name="startingPoint">Assemblies to start the search from, if not provided the entry assembly is used: Assembly.GetEntryAssembly().</param>
            <param name="typeFilter">Predicate to filter out returned types, or null for the default which is to include all public instance non-abstract and non-generic classes or value-types.</param>
            <param name="mustHavePublicDefaultCtor">True to ensure all returned types have a public default constructor defined, otherwise false.</param>
            <param name="assemblySearchOptions">How to search for additional assemblies to include.</param>
            <param name="throwOnError">True to throw on any assembly load errors, otherwise false.</param>
            <param name="assemblyNamePrefixes">Case insensitive prefixes of assembly names and file names (*.dlls) to include in search, null/empty to include all.</param>
            <returns></returns>
        </member>
        <member name="M:KodeAid.Reflection.ReflectionHelper.FindAllTypes(System.Reflection.Assembly,System.Type,System.Predicate{System.Type},System.Boolean,KodeAid.Reflection.AssemblySearchOptions,System.Boolean,System.String[])">
            <summary>
            Find all defined types across all referenced assemblies including those in the execution paths.
            </summary>
            <param name="startingPoint">Assemblies to start the search from, if not provided the entry assembly is used: Assembly.GetEntryAssembly().</param>
            <param name="ofType">Type which the results must be assignable to, null for no filter.</param>
            <param name="typeFilter">Predicate to filter out returned types, or null for the default which is to include all public instance non-abstract and non-generic classes or value-types.</param>
            <param name="mustHavePublicDefaultCtor">True to ensure all returned types have a public default constructor defined, otherwise false.</param>
            <param name="assemblySearchOptions">How to search for additional assemblies to include.</param>
            <param name="throwOnError">True to throw on any assembly load errors, otherwise false.</param>
            <param name="assemblyNamePrefixes">Case insensitive prefixes of assembly names and file names (*.dlls) to include in search, null/empty to include all.</param>
            <returns></returns>
        </member>
        <member name="M:KodeAid.Reflection.ReflectionHelper.FindAllTypes(System.Reflection.Assembly,System.Type,System.Predicate{System.Type},System.Boolean,KodeAid.Reflection.AssemblySearchOptions,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Find all defined types across all referenced assemblies including those in the execution paths.
            </summary>
            <param name="startingPoint">Assemblies to start the search from, if not provided the entry assembly is used: Assembly.GetEntryAssembly().</param>
            <param name="ofType">Type which the results must be assignable to, null for no filter.</param>
            <param name="typeFilter">Predicate to filter out returned types, or null for the default which is to include all public instance non-abstract and non-generic classes or value-types.</param>
            <param name="mustHavePublicDefaultCtor">True to ensure all returned types have a public default constructor defined, otherwise false.</param>
            <param name="assemblySearchOptions">How to search for additional assemblies to include.</param>
            <param name="throwOnError">True to throw on any assembly load errors, otherwise false.</param>
            <param name="assemblyNamePrefixes">Case insensitive prefixes of assembly names and file names (*.dlls) to include in search, null/empty to include all.</param>
            <returns></returns>
        </member>
        <member name="T:KodeAid.Text.Normalization.ILookupNormalizer">
            <summary>
            Provides an abstraction for normalizing keys for lookup purposes.
            </summary>
        </member>
        <member name="M:KodeAid.Text.Normalization.ILookupNormalizer.Normalize(System.String)">
            <summary>
            Returns a normalized representation of the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to normalize.</param>
            <returns>A normalized representation of the specified <paramref name="key"/>.</returns>
        </member>
        <member name="T:KodeAid.Text.Normalization.LowerInvariantLookupNormalizer">
            <summary>
            Implements <see cref="T:KodeAid.Text.Normalization.ILookupNormalizer"/> by converting keys to their lower cased invariant culture representation.
            </summary>
        </member>
        <member name="M:KodeAid.Text.Normalization.LowerInvariantLookupNormalizer.Normalize(System.String)">
            <summary>
            Returns a normalized representation of the specified <paramref name="key"/>
            by converting keys to their lower cased invariant culture representation.
            </summary>
            <param name="key">The key to normalize.</param>
            <returns>A normalized representation of the specified <paramref name="key"/>.</returns>
        </member>
        <member name="T:KodeAid.Text.Normalization.UpperInvariantLookupNormalizer">
            <summary>
            Implements <see cref="T:KodeAid.Text.Normalization.ILookupNormalizer"/> by converting keys to their upper cased invariant culture representation.
            </summary>
        </member>
        <member name="M:KodeAid.Text.Normalization.UpperInvariantLookupNormalizer.Normalize(System.String)">
            <summary>
            Returns a normalized representation of the specified <paramref name="key"/>
            by converting keys to their upper cased invariant culture representation.
            </summary>
            <param name="key">The key to normalize.</param>
            <returns>A normalized representation of the specified <paramref name="key"/>.</returns>
        </member>
        <member name="T:KodeAid.Text.StringMetrics.DamerauLevenshteinDistance">
            <summary>
            Compute the distance between two strings based on the number of 
            individual character insertions, deletions, substitutions or transpositions 
            required to change one string into another.
            </summary>
            <remarks>
            The difference between Damerau-Levenshtein and Levenshtein is the inclusion
            of transpositions ('ae' => 'ea') in Damerau-Levenshtein which count as a
            single edit as opposed to two in Levenshtein.
            </remarks>
        </member>
        <member name="M:KodeAid.Text.StringMetrics.DamerauLevenshteinDistance.ComputeDistance(System.String,System.String)">
            <summary>
            Compute the distance between two strings based on the number of 
            individual character insertions, deletions, substitutions or transpositions 
            required to change <paramref name="strA"/> into <paramref name="strB"/>.
            </summary>
        </member>
        <member name="T:KodeAid.Text.StringMetrics.IStringDistanceMetric">
            <summary>
            Provides an abstraction for calculating the distance between two strings.
            </summary>
        </member>
        <member name="M:KodeAid.Text.StringMetrics.IStringDistanceMetric.ComputeDistance(System.String,System.String)">
            <summary>
            Compute the distance between two strings based on the number of 
            individual character edits required to change <paramref name="strA"/> into <paramref name="strB"/>.
            </summary>
        </member>
        <member name="T:KodeAid.Text.StringMetrics.LevenshteinDistance">
            <summary>
            Compute the distance between two strings based on the number of 
            individual character insertions, deletions or substitutions required to
            change one string into another.
            </summary>
            <remarks>
            The difference between Levenshtein and Damerau-Levenshtein is the exclusion
            of transpositions ('ae' => 'ea') in Levenshtein which count as two edits as 
            opposed to just one in Damerau-Levenshtein.
            </remarks>
        </member>
        <member name="M:KodeAid.Text.StringMetrics.LevenshteinDistance.ComputeDistance(System.String,System.String)">
            <summary>
            Compute the distance between two strings based on the number of 
            individual character insertions, deletions or substitutions required to
            change <paramref name="strA"/> into <paramref name="strB"/>.
            </summary>
        </member>
        <member name="M:KodeAid.Text.StringMetrics.StringExtensions.ComputeLevenshteinDistance(System.String,System.String)">
            <summary>
            Compute the distance between two strings based on the number of 
            individual character insertions, deletions or substitutions required to
            change one string into another.
            </summary>
            <remarks>
            The difference between Levenshtein and Damerau-Levenshtein is the exclusion
            of transpositions ('ae' => 'ea') in Levenshtein which count as two edits as
            opposed to just one in Damerau-Levenshtein.
            </remarks>
        </member>
        <member name="M:KodeAid.Text.StringMetrics.StringExtensions.ComputeDamerauLevenshteinDistance(System.String,System.String)">
            <summary>
            Compute the distance between two strings based on the number of 
            individual character insertions, deletions, substitutions or transpositions 
            required to change one string into another.
            </summary>
            <remarks>
            The difference between Damerau-Levenshtein and Levenshtein is the inclusion
            of transpositions ('ae' => 'ea') in Damerau-Levenshtein which count as a 
            single edit as opposed to two in Levenshtein.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.ListExtensions.Replace``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Clears the list and then adds the specificed items.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="item"></param>
        </member>
        <member name="M:System.Data.DbCommandExtensions.PrepareCommandAndEnsureConnectionIsOpenAsync(System.Data.Common.DbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDataParameter},System.Threading.CancellationToken)">
            <summary>
            Prepares the command for execution and returns true if the connection should be closed within the extension method; otherwise false.
            </summary>
            <param name="command"></param>
            <param name="commandText"></param>
            <param name="parameters"></param>
            <param name="cancellationToken"></param>
            <returns>True if the connection should be closed within the extension method; otherwise false.</returns>
        </member>
        <member name="M:System.Data.IDbCommandExtensions.PrepareCommandAndEnsureConnectionIsOpen(System.Data.IDbCommand,System.String,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})">
            <summary>
            Prepares the command for execution and returns true if the connection should be closed within the extension method; otherwise false.
            </summary>
            <param name="command"></param>
            <param name="commandText"></param>
            <param name="parameters"></param>
            <returns>True if the connection should be closed within the extension method; otherwise false.</returns>
        </member>
        <member name="M:System.StringExtensions.TrimToNull(System.String)">
            <summary>
            Trims a string of all leading and trailing whitespace, and returns null if the result would be an empty string.
            </summary>
            <param name="str">The string to be trimmed.</param>
            <returns>A non whitespace-only string; or null if the result would be an empty string.</returns>
        </member>
        <member name="M:System.StringExtensions.Collapse(System.String,System.Boolean,System.String)">
            <summary>
            Collapse all runs of multiple whitespace into a single space character.
            </summary>
            <param name="str">The string to collapse.</param>
            <param name="multiline">If true, lines will be kept but runs of multiple blank lines will be collasped into a single <paramref name="newLine"/> string</param>
            <param name="newLine">The new line string to use for new-lines, if null will default to <seealso cref="P:System.Environment.NewLine"/>.</param>
            <returns>A string that has all white space collapsed.</returns>
        </member>
        <member name="M:System.StringExtensions.CollapseAndTrim(System.String,System.Boolean,System.String)">
            <summary>
            Performs a <see cref="M:System.StringExtensions.Collapse(System.String,System.Boolean,System.String)"/> and <see cref="M:System.String.Trim"/>.
            </summary>
            <param name="str">The string to collapse and trim.</param>
            <param name="multiline">If true, lines will be kept but runs of multiple blank lines will be collasped into a single <paramref name="newLine"/> string;
            all leading and trailing new-lines however will be trimmed.</param>
            <param name="newLine">The new line string to use for new-lines, if null will default to <seealso cref="P:System.Environment.NewLine"/>.</param>
            <returns>A string that has all white space collapsed and all leading and trailing whitespace trimmed.</returns>
        </member>
        <member name="M:System.StringExtensions.CollapseAndTrimToNull(System.String,System.Boolean,System.String)">
            <summary>
            Performs a <see cref="M:System.StringExtensions.Collapse(System.String,System.Boolean,System.String)"/> and <see cref="M:System.StringExtensions.TrimToNull(System.String)"/>.
            </summary>
            <param name="str">The string to collapse and trim to null.</param>
            <param name="multiline">If true, lines will be kept but runs of multiple blank lines will be collasped into a single <paramref name="newLine"/> string;
            all leading and trailing new-lines however will be trimmed.</param>
            <param name="newLine">The new line string to use for new-lines, if null will default to <seealso cref="P:System.Environment.NewLine"/>.</param>
            <returns>A non whitespace-only string that has all white space collapsed and all leading and trailing whitespace trimmed; or null if the result would be an empty string.</returns>
        </member>
        <member name="M:System.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Truncates a string to a specified maximum length.
            </summary>
            <param name="str">The string to truncate.</param>
            <param name="maxLength">The maximum length of the new string.</param>
            <returns>If the length of <paramref name="str"/> is equal to or less than <paramref name="maxLength"/> 
            then the original <paramref name="str"/> is returned; otherwise the excess trailing characters are removed and
            the result will be of length <paramref name="maxLength"/>.</returns>
        </member>
        <member name="M:System.StringExtensions.JoinEscaped(System.Collections.Generic.IEnumerable{System.String},System.Char,System.Char)">
            <summary>
            Concatenates the members of a constructed <seealso cref="T:System.Collections.Generic.IEnumerable`1"/> collection of type <seealso cref="T:System.String"/> 
            using the specified <paramref name="separator"/> between each member and escaping any <paramref name="separator"/> characters found in the members.
            </summary>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <param name="separator">The character to use as a separator. It is included in the returned string only if values has more than one element.</param>
            <param name="escape">The escape character to escape pre-exisiting <paramref name="separator"/> characters found within <paramref name="values"/>.</param>
            <returns>A string that consists of the members of values delimited by the separator string. If values has no members, the method returns <seealso cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="M:System.StringExtensions.SplitEscaped(System.String,System.Char,System.Char)">
            <summary>
            Splits a string into a maximum number of substrings based on the strings in an array.
            </summary>
            <param name="str"></param>
            <param name="separator">A char that delimits the substrings in this string.</param>
            <param name="escape">The escape character to unescape pre-exisiting <paramref name="separator"/> characters that are not an actual separator.</param>
            <returns>An array whose elements contain the substrings from this instance that are delimited by <paramref name="separator"/>.</returns>
        </member>
        <member name="M:System.StringExtensions.ContainsToken(System.String,System.String)">
            <summary>
            Returns a value indicating whether a specified token occurs within a string.
            The characters '}' and ':' are not supported in the token name.
            </summary>
            <param name="str">Input string that may contain one or more tokens.</param>
            <param name="token">Name of the token to seek, eg: use "MyToken" to find "{MyToken:F2}".</param>
            <returns>True if the <paramref name="token"/> parameter occurs within <paramref name="str"/>; otherwise, false.</returns>
        </member>
        <member name="M:System.StringExtensions.ReplaceToken(System.String,System.String,System.String)">
            <summary>
            Replaces the first matching token in a string, eg: "Insert{MyToken}Here".
            The token may contain a format, eg: "{MyToken:F2}" or "{MyToken:yyyy-MM-dd}".
            The characters '}' and ':' are not supported in the token name.
            You can compare the resulting string to the original string to determine if a replacement took place.
            </summary>
            <param name="str">Input string that may contain one or more tokens.</param>
            <param name="token">Name of the token to replace, eg: use "MyToken" to replace "{MyToken}".</param>
            <param name="value">Replacement string value.</param>
            <returns>The result of <paramref name="str"/> with the matching token (if found) replaced with <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.StringExtensions.ReplaceToken(System.String,System.String,System.Object)">
            <summary>
            Replaces the first matching token in a string, eg: "Insert{MyToken}Here".
            The token may contain a format, eg: "{MyToken:F2}" or "{MyToken:yyyy-MM-dd}".
            The characters '}' and ':' are not supported in the token name.
            You can compare the resulting string to the original string to determine if a replacement took place.
            </summary>
            <param name="str">Input string that may contain one or more tokens.</param>
            <param name="token">Name of the token to replace, eg: use "MyToken" to replace "{MyToken}".</param>
            <param name="value">Replacement value, to be converted to a string unformatted.</param>
            <returns>The result of <paramref name="str"/> with the matching token (if found) replaced with an
            unformatted string representation of <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.StringExtensions.ReplaceToken(System.String,System.String,System.IFormattable,System.String,System.IFormatProvider)">
            <summary>
            Replaces the first matching token in a string, eg: "Insert{MyToken}Here".
            The token may contain a format, eg: "{MyToken:F2}" or "{MyToken:yyyy-MM-dd}".
            The characters '}' and ':' are not supported in the token name.
            You can compare the resulting string to the original string to determine if a replacement took place.
            </summary>
            <param name="str">Input string that may contain one or more tokens.</param>
            <param name="token">Name of the token to replace, eg: use "MyToken" to replace "{MyToken}".</param>
            <param name="value">Replacement value, to be converted to a string formatted with either the format specified by the token
            otherwise by <paramref name="defaultFormat"/>.</param>
            <param name="defaultFormat">Default format to use on the <paramref name="value"/> if no format is specified on the matched token.</param>
            <param name="formatProvider">The provider to use to format the <paramref name="value"/>. -or- 
            A null reference to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>The result of <paramref name="str"/> with the matching token (if found) replaced with a formatted <paramref name="value"/>.</returns>
        </member>
        <member name="M:System.StringExtensions.ToSentenceCase(System.String)">
            <summary>
            Convert from "ResourceNotFound" to "Resource not found"
            </summary>
        </member>
        <member name="M:System.StringExtensions.ToTitleCase(System.String)">
            <summary>
            Convert from "ResourceNotFound" to "Resource Not Found"
            </summary>
        </member>
        <member name="M:System.StringExtensions.ToPascalCase(System.String)">
            <summary>
            Convert from "Resource not found" to "ResourceNotFound"
            </summary>
        </member>
        <member name="M:System.StringExtensions.ToCamelCase(System.String)">
            <summary>
            Convert from "Resource not found" to "resourceNotFound"
            </summary>
        </member>
        <member name="M:System.StringExtensions.ToMacroConstantCase(System.String)">
            <summary>
            Convert from "ResourceNotFound" or "Resource NOT found!" to "RESOURCE_NOT_FOUND"
            </summary>
        </member>
        <member name="M:System.StringExtensions.RemoveDiacritics(System.String)">
            <summary>
            Remove all diacritics (such as accents, cedilla and other glyphs) from each 
            character in the string and normalize as Unicode form C.
            </summary>
        </member>
    </members>
</doc>
